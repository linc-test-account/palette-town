.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  flex-basis: 0;
  overflow: hidden;
  position: relative;
}

.content {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  margin: 0 0 40px 0;
}

.colorName {
  font-family: "Varela Round", sans-serif;
  font-family: var(--app-font);
  font-weight: bold;
  margin: 0;
  padding: 0;
  font-size: 17px;
  font-style: italic;
}

.buttonsContainer {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  align-content: center;
}

.swatchButton {
  background: none;
  border: none;
  padding: 10px 0 10px 0;
  cursor: pointer;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-content: center;
  align-items: center;
}

.swatchButtonIcon {
  font-size: 26px;
  /* margin: 0 20px 0 0; */
}

@media screen and (max-width: 1200px) {
  .colorName {
    font-size: 12px;
  }

  .swatchButton {
    font-size: 10px;
    margin: 10px;
  }
}

@media screen and (min-width: 2000px) {
  .colorName {
    font-size: 23px;
  }
}

@media screen and (max-width: 700px) {
  .container {
    display: flex;
    flex-direction: row;
    align-content: center;
    justify-content: center;
    width: 100%;
  }

  .content {
    margin: 0 60px 0 0;
    min-width: 20%;
    padding: 0;
  }

  .colorName {
    font-size: 11px;
  }

  .swatchButtonIcon {
    font-size: 26px;
    margin: 0 20px 0 0;
  }

  .swatchButton:first-of-type {
    margin: 0 0 0 0;
  }

  .buttonsContainer {
    display: flex;
    flex-direction: row;
    justify-content: center;
  }

  .swatchButton {
    font-size: 15px;
    padding: 0 5px 0 5px;
  }

  .swatchButton:last-child {
    margin: 0;
  }
}

/* Grabbable styling */

.grabbable {
  cursor: move; /* fallback if grab cursor is unsupported */
  cursor: grab;
  cursor: -moz-grab;
  cursor: -webkit-grab;
}

/* (Optional) Apply a "closed-hand" cursor during drag operation. */
.grabActive { 
  cursor: grabbing;
  cursor: -moz-grabbing;
  cursor: -webkit-grabbing;
}

/* 
  Applying transition to flex on sortable items contained
  within an instance of react-sortable-hoc appears to break
  sortable item transition on manualy sorted items. That is,
  when you move an item around, adjacent items instantly appear
  in there new position without a smooth transition. This is not good.

  My current workaround is to use react-sortable-hoc's onSortStart 
  and onSortEnd callback props to determine if sorting is in progress.
  I can then add the 'swatchFlexTransition' class below to a sortable 
  item to give transition to flex when sorting within react-sortable-hoc
  is not in progress. The transition applied to flex here simply applies
  smooth transition between different flex-grow values.
*/
.swatchFlexTransition {
  transition: 0.3s ease flex;
}

.noselect {
  -webkit-touch-callout: none; /* iOS Safari */
  -webkit-user-select: none; /* Safari */
  -khtml-user-select: none; /* Konqueror HTML */
  -moz-user-select: none; /* Firefox */
  -ms-user-select: none; /* Internet Explorer/Edge */
  -ms-user-select: text;
  -ms-user-select: element;
  user-select: none; /* Non-prefixed version, currently
                                  supported by Chrome and Opera */
}